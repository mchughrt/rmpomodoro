{"version":3,"sources":["pomodoro.jsx","App.js","reportWebVitals.js","index.js"],"names":["Pomodoro","useState","minutes","setMinutes","seconds","setSeconds","displayMessage","setDisplayMessage","useEffect","interval","setInterval","clearInterval","timerMinutes","timerSeconds","className","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAEe,SAASA,IACpB,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA4CJ,oBAAS,GAArD,mBAAOK,EAAP,KAAuBC,EAAvB,KAEAC,qBAAW,WACP,IAAIC,EAAWC,aAAY,WAGvB,GAFAC,cAAcF,GAEE,IAAZL,EACA,GAAgB,IAAZF,EACAG,EAAW,IACXF,EAAWD,EAAS,OACjB,CACH,IAAIA,EAAUI,EAAiB,GAAK,EAIpCD,EAHc,IAIdF,EAAWD,GACXK,GAAmBD,QAGnBD,EAAWD,EAAS,KAE7B,OACJ,CAACA,IAEJ,IAAMQ,EAAeV,EAAU,GAAV,WAAmBA,GAAYA,EAC9CW,EAAeT,EAAU,GAAV,WAAmBA,GAAYA,EAGpD,OACA,sBAAKU,UAAU,WAAf,UACI,qBAAKA,UAAU,UAAf,SACIR,GAAkB,wEAEtB,sBAAKQ,UAAU,QAAf,UAAwBF,EAAxB,IAAuCC,QC9BhCE,MANf,WACI,OAAQ,qBAAKD,UAAU,MAAf,SACJ,cAACd,EAAD,OCOOgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.f5505b91.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport default function Pomodoro(){\n    const [minutes, setMinutes] = useState(25);\n    const [seconds, setSeconds] = useState(0);\n    const [displayMessage, setDisplayMessage] = useState(false);\n\n    useEffect( () => {\n        let interval = setInterval(() => {\n            clearInterval(interval);\n\n            if (seconds === 0){\n                if (minutes !== 0) {\n                    setSeconds(59);\n                    setMinutes(minutes -1);\n                } else {\n                    let minutes = displayMessage ? 24 : 4;\n                    let seconds = 59;\n\n\n                    setSeconds(seconds);\n                    setMinutes(minutes);\n                    setDisplayMessage(!displayMessage);\n                }    \n                } else {\n                    setSeconds(seconds -1);\n                }\n        }, 1000)\n    }, [seconds]);\n\n    const timerMinutes = minutes < 10 ? `0${minutes}` : minutes;\n    const timerSeconds = seconds < 10 ? `0${seconds}` : seconds;\n\n\n    return (\n    <div className=\"pomodoro\">\n        <div className=\"message\">\n           {displayMessage && <div>Break time! Next session starts in:</div>}\n        </div>\n        <div className=\"timer\">{timerMinutes}:{timerSeconds}</div>\n\n    </div>\n    );\n}","import \"./App.css\";\nimport Pomodoro from \"./pomodoro\"\n\nfunction App() {\n    return (<div className=\"App\">\n        <Pomodoro />\n    </div>);\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}